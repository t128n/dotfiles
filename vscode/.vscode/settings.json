{
    // Use the JSON editor for settings, not the UI.
    "workbench.settings.editor": "json",
    // -------------------------
    // [ Window & General ]
    // -------------------------
    // Top-level zoom of the entire window.
    "window.zoomLevel": 0,
    // Hide the top command center bar.
    "window.commandCenter": false,
    // Open a new untitled file on startup instead of the welcome screen.
    "workbench.startupEditor": "newUntitledFile",
    // Set the default language for new, unsaved files.
    "files.defaultLanguage": "markdown",
    // Disable accessibility features and sounds which can be distracting.
    "editor.accessibilitySupport": "off",
    // -------------------------
    // [ Theming ]
    // -------------------------
    // Automatically switch between light and dark themes based on the OS setting.
    "window.autoDetectColorScheme": true,
    "workbench.preferredLightColorTheme": "Min Light",
    "workbench.preferredDarkColorTheme": "Min Dark",
    // Set the icon theme for the editor.
    "workbench.iconTheme": "charmed-icons",
    // Set the product icon theme (icons outside the editor area).
    "workbench.productIconTheme": "fluent-icons",
    // -------------------------
    // [ Workbench Layout ]
    // -------------------------
    // --- General ---
    // Hide the layout control icon in the upper right corner.
    "workbench.layoutControl.enabled": false,
    // Enable smooth scrolling for lists and trees in the workbench.
    "workbench.list.smoothScrolling": true,
    // --- Sidebar & Explorer ---
    // Show the primary sidebar on the right side of the screen.
    "workbench.sideBar.location": "right",
    // Show full folder names instead of compressing them (e.g., "src/components" instead of "src/components").
    "explorer.compactFolders": false,
    // Hide the "Open Editors" section in the explorer view.
    "explorer.openEditors.visible": 0,
    // Disables the confirmation pop-up when you delete files or folders from the Explorer.
    "explorer.confirmDelete": false,
    // Disables the confirmation pop-up when you move files or folders by dragging and dropping them.
    "explorer.confirmDragAndDrop": false,
    // Automatically closes an editor tab if the corresponding file is deleted from the disk.
    "workbench.editor.closeOnFileDelete": true,
    // Set the indentation for the file explorer tree.
    "workbench.tree.indent": 10,
    // Hide the "NEw file" buttons
    "files.exclude": {
        "**/.git": true,
        "**/.svn": true,
        "**/.hg": true,
        "**/.DS_Store": true,
        "**/Thumbs.db": true,
        "**/desktop.ini": true,
        "**/node_modules": true,
        "**/pnpm-lock.yaml": true,
        "**/package-lock.json": true,
        "**/yarn.lock": true,
        "**/bun.lockbf": true,
        "**/.cache": true,
        "**/.next": true,
        "**/.nuxt": true,
        "**/.output": true,
        "**/dist": true,
        "**/build": true,
        "**/out": true,
        "**/coverage": true,
        "**/.vite": true,
        "**/*.log": true,
        "**/npm-debug.log*": true,
        "**/yarn-error.log*": true,
        ".env*": true,
        "!.env.example": false, // BUT, show the example .env file
    },
    // --- Activity Bar (Primary Actions) ---
    // Move the activity bar (File, Search, Git icons) to the bottom, acting as a panel switcher.
    "workbench.activityBar.location": "bottom",
    // --- Status Bar ---
    // Hide the status bar at the very bottom of the window.
    "workbench.statusBar.visible": false,
    // --- Editor Tabs ---
    // OUTDATED: Hide editor tabs completely to focus on the current file.
    "workbench.editor.showTabs": "multiple",
    // Activates a limit on the number of editor tabs that can be open simultaneously.
    "workbench.editor.limit.enabled": true,
    // Applies the editor tab limit to each editor group individually (e.g., if you have a split-screen layout).
    "workbench.editor.limit.perEditorGroup": true,
    // Sets the maximum number of allowed open editor tabs to 5 (per group).
    "workbench.editor.limit.value": 5,
    // - Adds a visual indicator (a colored line at the top) to editor tabs that have unsaved changes.
    "workbench.editor.highlightModifiedTabs": true,
    // Hide the action icons (e.g., Split Editor) in the editor title bar.
    "workbench.editor.editorActionsLocation": "hidden",
    // Disable preview mode: files will always open in a persistent tab.
    "workbench.editor.enablePreview": false,
    // Disable preview mode when opening files from Quick Open (Cmd+P).
    "workbench.editor.enablePreviewFromQuickOpen": false,
    // -------------------------
    // [ Editor ]
    // -------------------------
    // --- Font & Typography ---
    "editor.fontFamily": "Monaspace Neon",
    "chat.editor.fontFamily": "Monaspace Xenon",
    "editor.codeLensFontFamily": "Monaspace Xenon",
    "editor.inlayHints.fontFamily": "Monaspace Xenon",
    "notebook.output.fontFamily": "Monaspace Xenon",
    "editor.inlineSuggest.fontFamily": "Monaspace Krypton",
    "editor.fontSize": 14,
    // Enable font ligatures (e.g., turning '=>' into a single arrow character).
    "editor.fontLigatures": true,
    // Set the line height for better readability.
    "editor.lineHeight": 1.4,
    // --- Layout & Visibility ---
    // Disable automatic word wrapping.
    "editor.wordWrap": "off",
    // Hide the horizontal scrollbar.
    "editor.scrollbar.horizontal": "hidden",
    // Hide the vertical scrollbar.
    "editor.scrollbar.vertical": "hidden",
    "editor.scrollbar.verticalScrollbarSize": 0,
    // Hide the minimap.
    "editor.minimap.enabled": false,
    // Hide the breadcrumbs navigation at the top of the editor.
    "breadcrumbs.enabled": false,
    // Disable the highlight on the current line.
    "editor.renderLineHighlight": "none",
    // Hide the margin where breakpoints and icons appear.
    "editor.glyphMargin": false,
    // Disable code folding entirely.
    "editor.folding": false,
    // Hide the +/- icons for code folding.
    "editor.showFoldingControls": "never",
    // Show whitespace characters only between words.
    "editor.renderWhitespace": "boundary",
    // Hide special control characters.
    "editor.renderControlCharacters": false,
    // Enable smooth scrolling within the editor.
    "editor.smoothScrolling": true,
    // Allow scrolling one screen beyond the last line of the file.
    "editor.scrollBeyondLastLine": true,
    // Show line numbers at a periodic interval.
    "editor.lineNumbers": "interval",
    // Hide CodeLens information (e.g., reference counts) above functions.
    "editor.codeLens": false,
    //  Defines the set of characters that act as word boundaries. This affects actions like word selection (double-click) and keyboard navigation (Ctrl/Cmd + Arrow Keys).
    "editor.wordSeparators": "`~!@#%^&*()=+[{]}\\|;:'\",.<>/?",
    // Prevents the editor from automatically adding extra space at the top when the Find widget (Ctrl/Cmd + F) is active.
    "editor.find.addExtraSpaceOnTop": false,
    // --- Cursor & Caret ---
    // Set the cursor blinking animation style.
    "editor.cursorBlinking": "phase",
    // Set the cursor shape to a vertical line.
    "editor.cursorStyle": "line",
    // Enable smooth animation for cursor movement.
    "editor.cursorSmoothCaretAnimation": "on",
    // Sets the modifier key for adding multiple cursors. You can now use Ctrl+Click (Windows/Linux) or Cmd+Click (macOS) to place additional cursors.
    "editor.multiCursorModifier": "ctrlCmd",
    // --- Brackets & Guides ---
    // Don't draw a vertical line connecting the currently active pair of brackets.
    "editor.bracketPairColorization.enabled": false,
    // --- Formatting & Saving ---
    // Set the width of a tab to 4 spaces.
    "editor.tabSize": 4,
    // Insert spaces when pressing the Tab key.
    "editor.insertSpaces": true,
    // Automatically trim trailing whitespace when saving a file.
    "files.trimTrailingWhitespace": true,
    // Ensure a final newline character is present at the end of the file on save.
    "files.insertFinalNewline": true,
    // Sets the default end-of-line sequence to Line Feed (\n), the standard for Linux and macOS.
    "files.eol": "\n",
    // Enables the modern, simplified file open/save dialogs provided by VS Code instead of the native OS dialogs.
    "files.simpleDialog.enable": true,
    // Render the final newline character dimly.
    "editor.renderFinalNewline": "dimmed",
    // Automatically format the document on save.
    "editor.formatOnSave": true,
    // Format only the lines that have been modified.
    "editor.formatOnSaveMode": "modificationsIfAvailable",
    // Configure default formatters for different languages.
    "editor.defaultFormatter": "biomejs.biome",
    // Actions that run automatically whenever you save a file.
    "editor.codeActionsOnSave": {
        // Automatically fix all fixable issues in the file when saving.
        "source.fixAll": "explicit",
        // Prevents VS Code from automatically sorting and removing unused import statements on save. Will be handled by the specific language extensions.
        "source.organizeImports": "never",
        // Extension specific actions:
        "source.fixAll.biome": "explicit",
        "source.organizeImports.biome": "explicit",
    },
    // Keep 5 lines of context above and below the cursor when scrolling.
    "editor.cursorSurroundingLines": 5,
    // --- Language-Specific ---
    // Automatically update the closing tag when an opening HTML/XML tag is renamed.
    "editor.linkedEditing": true,
    // --- Diff Editor ---
    // Use the advanced diffing algorithm for better accuracy.
    "diffEditor.diffAlgorithm": "advanced",
    // Show diffs in a unified, inline view instead of side-by-side.
    "diffEditor.renderSideBySide": false,
    // When comparing files, this ensures that differences in trailing whitespace (spaces at the end of a line) are highlighted as changes.
    "diffEditor.ignoreTrimWhitespace": false,
    // -------------------------
    // [ Git Integration ]
    // -------------------------
    // Disable Git status colors in the file explorer.
    "git.decorations.enabled": false,
    // Disable Git change indicators (added, modified, deleted) in the editor's gutter.
    "scm.diffDecorations": "none",
    //  Periodically runs git fetch in the background to keep your local repository's remote-tracking branches up to date.
    "git.autofetch": true,
    // Disables the confirmation prompt before executing the Sync command, which pushes your local commits and pulls remote commits.
    "git.confirmSync": false,
    // Allows to commit all tracked, changed files in the repository with a single command.
    "git.enableSmartCommit": true,
    // Display untracked files in seperate category in the Source Control view.
    "git.untrackedChanges": "separate",
    // Open repositories in the parent folder of the current workspace.
    "git.openRepositoryInParentFolders": "always",
    // -------------------------
    // [ Integrated Terminal ]
    // -------------------------
    // Use the integrated terminal within the main editor panel.
    "terminal.explorerKind": "integrated",
    "terminal.integrated.fontFamily": "Monaspace Argon",
    "terminal.integrated.fontSize": 14,
    // Set the terminal cursor style to a line.
    "terminal.integrated.cursorStyle": "line",
    // Set the cursor style to an outline when the terminal is not focused.
    "terminal.integrated.cursorStyleInactive": "outline",
    // Enable the terminal cursor to blink.
    "terminal.integrated.cursorBlinking": true,
    // Set the terminal's scrollback buffer to 10,000 lines.
    "terminal.integrated.scrollback": 10000,
    // Enable smooth scrolling in the terminal.
    "terminal.integrated.smoothScrolling": true,
    // Disable the warning when pasting multiple lines of text into the terminal.
    "terminal.integrated.enableMultiLinePasteWarning": "never",
    // Prevents the attempt to restore contents and processes of terminal session when reoping a workspace.
    "terminal.integrated.persistentSessionReviveProcess": "never",
    // Enables a tabbed interface within the terminal panel, allowing you to manage multiple terminal sessions easily.
    "terminal.integrated.tabs.enabled": true,
    // Enables suggestions in the terminal, such as command completions and snippets.
    "terminal.integrated.suggest.enabled": true,
    // -------------------------
    // [ Search & Find ]
    // -------------------------
    "search.exclude": {
        "**/*.snap": true,
        "**/*.svg": true,
        "**/.git": true,
        "**/.github": false,
        "**/.nuxt": true,
        "**/.output": true,
        "**/.pnpm": true,
        "**/.vscode": true,
        "**/.yarn": true,
        "**/assets": true,
        "**/bower_components": true,
        "**/dist/**": true,
        "**/logs": true,
        "**/node_modules": true,
        "**/out/**": true,
        "**/package-lock.json": true,
        "**/pnpm-lock.yaml": true,
        "**/public": true,
        "**/temp": true,
        "**/yarn.lock": true,
        "**/CHANGELOG*": true,
        "**/LICENSE*": true,
    },
    // -------------------------
    // [ GitHub Copilot ]
    // -------------------------
    "github.copilot.enable": {
        "*": true
    },
    // Enables inline code suggestions (e.g., from GitHub Copilot) that appear as ghost text as you type.
    "editor.inlineSuggest.enabled": true,
    // Enable code search capabilities in Copilot Chat.
    "github.copilot.chat.codesearch.enabled": true,
    // Show the "thinking" process from the Copilot Chat agent.
    "github.copilot.chat.agent.thinkingTool": true,
    // Instructions for generating conventional commit messages.
    "github.copilot.chat.commitMessageGeneration.instructions": [
        {
            "text": "Generate a concise, conventional commit message in imperative mood and present tense. Use the format: <type>: <subject> (max 50 chars). If needed, add a body (wrap at 72 chars), and reference issues (e.g., 'Closes #123')."
        }
    ],
    "github.copilot.chat.completionContext.typescript.mode": "sidecar",
    "github.copilot.chat.editor.temporalContext.enabled": true,
    "github.copilot.chat.edits.temporalContext.enabled": true,
    "github.copilot.chat.reviewSelection.enabled": true,
    // Instructions for generating pull request descriptions.
    "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
        {
            "text": "Generate a concise, conventional pull request description in imperative mood and present tense. Use the format: <type>: <subject> (max 50 chars). If needed, add a body (wrap at 72 chars), and reference issues (e.g., 'Closes #123')."
        }
    ],
    // Instructions for reviewing selected code.
    "github.copilot.chat.reviewSelection.instructions": [
        {
            "text": "Review the selected code changes. Provide feedback on the changes, such as 'Looks good', 'Needs improvement', or 'Incorrect'."
        }
    ],
    // -------------------------
    // [ Extensions ]
    // -------------------------
    // --- Error Lens ---
    // Make errors visible but not intrusive.
    "errorLens.delay": 500,
    "errorLens.fontFamily": "Monaspace Radon",
    "errorLens.fontStyleItalic": true,
    // --- Better Comments ---
    "better-comments.tags": [
        {
            "tag": "!",
            "color": "#FF2D00",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "?",
            "color": "#3498DB",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "//",
            "color": "#474747",
            "strikethrough": true,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "todo",
            "color": "#FF8C00",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "*",
            "color": "#98C379",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "fixme",
            "color": "#E06C75",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": true,
            "italic": false
        }
    ],
    // --- Spell Checker ---
    "cSpell.ignorePaths": [
        "node_modules",
        "dist",
        "build",
        "*.lock",
        ".git"
    ],
    "cSpell.userWords": [
        "astro",
        "pylance",
        "tailwindcss",
        "toml",
        "venv",
        "Torben",
        "Haack",
        "t128n"
    ],
    // --- PyLance & Ruff ---
    "python.analysis.typeCheckingMode": "standard",
    "python.terminal.activateEnvironment": true,
    "autoDocstring.docstringFormat": "google",
    // -------------------------
    // [ Language-Specific Settings ]
    // -------------------------
    "[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.codeActionsOnSave": {
            "source.fixAll.ruff": "explicit",
            "source.organizeImports.ruff": "explicit"
        }
    },
}
